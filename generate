Script started on Sat 08 May 2010 11:37:22 PM PDT
]0;asit@ubuntu: ~/Apps/pjasit@ubuntu:~/Apps/pj$ man routeping google.com[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kscript generate model nationality
Script started, file is generate
]0;asit@ubuntu: ~/Apps/pjasit@ubuntu:~/Apps/pj$ script/generate model nationality
/usr/lib/ruby/gems/1.8/gems/rails-2.3.5/lib/rails/gem_dependency.rb:119:Warning: Gem::Dependency#version_requirements is deprecated and will be removed on or after August 2010.  Use #requirement
/home/asit/Apps/pj/config/initializers/geokit_for_named_scope.rb:40: warning: already initialized constant VALID_FIND_OPTIONS
      exists  app/models/
      exists  test/unit/
      exists  test/fixtures/
      create  app/models/nationality.rb
      create  test/unit/nationality_test.rb
      create  test/fixtures/nationalities.yml
      exists  db/migrate
      create  db/migrate/20100509063746_create_nationalities.rb
]0;asit@ubuntu: ~/Apps/pjasit@ubuntu:~/Apps/pj$ script/generate -s scaffold dude
/usr/lib/ruby/gems/1.8/gems/rails-2.3.5/lib/rails/gem_dependency.rb:119:Warning: Gem::Dependency#version_requirements is deprecated and will be removed on or after August 2010.  Use #requirement
/home/asit/Apps/pj/config/initializers/geokit_for_named_scope.rb:40: warning: already initialized constant VALID_FIND_OPTIONS
Couldn't find '-s' generator
]0;asit@ubuntu: ~/Apps/pjasit@ubuntu:~/Apps/pj$ script/generate -s scaffold dude[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K --help
/usr/lib/ruby/gems/1.8/gems/rails-2.3.5/lib/rails/gem_dependency.rb:119:Warning: Gem::Dependency#version_requirements is deprecated and will be removed on or after August 2010.  Use #requirement
/home/asit/Apps/pj/config/initializers/geokit_for_named_scope.rb:40: warning: already initialized constant VALID_FIND_OPTIONS
Usage: script/generate generator [options] [args]

Rails Info:
    -v, --version                    Show the Rails version number and quit.
    -h, --help                       Show this help message and quit.

General Options:
    -p, --pretend                    Run but do not make any changes.
    -f, --force                      Overwrite files that already exist.
    -s, --skip                       Skip files that already exist.
    -q, --quiet                      Suppress normal output.
    -t, --backtrace                  Debugging: show backtrace on errors.
    -c, --svn                        Modify files with subversion. (Note: svn must be in path)
    -g, --git                        Modify files with git. (Note: git must be in path)


Installed Generators
  Plugins (vendor/plugins): paperclip
  Rubygems: form, formtastic, formtastic_stylesheets, session
  Builtin: controller, helper, integration_test, mailer, metal, migration, model, observer, performance_test, plugin, resource, scaffold, session_migration

More are available at http://wiki.rubyonrails.org/rails/pages/AvailableGenerators
  1. Download, for example, login_generator.zip
  2. Unzip to directory /home/asit/.rails/generators/login
     to use the generator with all your Rails apps
     or to /home/asit/Apps/pj/lib/generators/login
     to use with this app only.
  3. Run generate with no arguments for usage information
       script/generate login

Generator gems are also available:
  1. gem search -r generator
  2. gem install login_generator
  3. script/generate login

]0;asit@ubuntu: ~/Apps/pjasit@ubuntu:~/Apps/pj$ script/generate --helps scaffold dudemodel nationality[1P-s scaffold dude[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kclear
[H[2J]0;asit@ubuntu: ~/Apps/pjasit@ubuntu:~/Apps/pj$ ls db/migrate/*
db/migrate/20100130065742_add_role_description_to_roles.rb    db/migrate/20100410180057_rename_place_type_to_merchant_type.rb
db/migrate/20100130081127_create_users.rb                     db/migrate/201004101941         db/migrate/20100410205326_rename_merchant_ownership_to_merchant_user.rb
db/migrate/20100204070243_create_articles.rb                  db/migrate/20100410205613_rename_place_id_to_merchant_id.rb
db/migrate/20100204070717_create_comments.rb                  db/migrate/20100411004852_add_user_id_to_merchants.rb
db/migrate/20100204232217_add_type_to_article.rb              db/migrate/20100420054838_create_tables.rb
db/migrate/20100206012259_add_users_password_reset_fields.rb  db/migrate/20100430054131_create_categories.rb
db/migrate/20100206181646_create_user_roles.rb                db/migrate/20100430060554_create_categorizations.rb
db/migrate/20100206215833_create_assignments.rb               db/migrate/20100503003600_create_merchant_categories.rb
db/migrate/20100209024715_create_events.rb                    db/migrate/20100503003628_create_merchant_categorizations.rb
db/migrate/20100209025405_create_addresses.rb                 db/migrate/20100506220748_create_gcertsteps.rb
db/migrate/20100224211956_create_images.rb                    db/migrate/20100506221155_create_gcertifications.rb
db/migrate/20100226220252_create_interests.rb                 db/migrate/20100507055454_create_certstep_merchant_categorizations.rb
db/migrate/20100226221950_add_interest_name_to_interests.rb   db/migrate/20100509063532_create_dudes.rb
db/migrate/20100307060432_create_places.rb                    db/migrate/20100509063619_create_nations.rb
db/migrate/20100307203010_create_place_ownerships.rb          db/migrate/20100509063746_create_nationalities.rb
db/migrate/20100410175641_rename_places_to_merchants.rb
]0;asit@ubuntu: ~/Apps/pjasit@ubuntu:~/Apps/pj$ rake db:migrate VERSION=20100509063532
(in /home/asit/Apps/pj)
==  CreateDudes: migrating ====================================================
-- create_table(:dudes)
   -> 0.2387s
==  CreateDudes: migrated (0.2389s) ===========================================

]0;asit@ubuntu: ~/Apps/pjasit@ubuntu:~/Apps/pj$ rake db:migrate VERSION=20100509063532[K[K[K619
(in /home/asit/Apps/pj)
==  CreateNations: migrating ==================================================
-- create_table(:nations)
   -> 0.0974s
==  CreateNations: migrated (0.0975s) =========================================

]0;asit@ubuntu: ~/Apps/pjasit@ubuntu:~/Apps/pj$ rake db:migrate VERSION=20100509063619532[K[K[K[K3746
(in /home/asit/Apps/pj)
==  CreateNationalities: migrating ============================================
-- create_table(:nationalities)
   -> 0.0866s
==  CreateNationalities: migrated (0.0867s) ===================================

]0;asit@ubuntu: ~/Apps/pjasit@ubuntu:~/Apps/pj$ clear
[H[2J]0;asit@ubuntu: ~/Apps/pjasit@ubuntu:~/Apps/pj$ cd ../test/
]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ rake db:migr[K[K[K[K[K:c[K[K[K[K[K
(in /home/asit/Apps/test)
/usr/bin/ruby1.8 -I"lib:test" "/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake/rake_test_loader.rb"  
/usr/bin/ruby1.8 -I"lib:test" "/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake/rake_test_loader.rb"  
Errors running test:units!
]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ rake 
(in /home/asit/Apps/test)
/usr/bin/ruby1.8 -I"lib:test" "/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake/rake_test_loader.rb"  
/usr/bin/ruby1.8 -I"lib:test" "/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake/rake_test_loader.rb"  
Errors running test:units!
]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ rake -t
(in /home/asit/Apps/test)
** Invoke default (first_time)
** Invoke test (first_time)
** Execute test
** Invoke test:units (first_time)
** Invoke db:test:prepare (first_time)
** Invoke db:abort_if_pending_migrations (first_time)
** Invoke environment (first_time)
** Execute environment
** Execute db:abort_if_pending_migrations
** Invoke test:functionals (first_time)
** Invoke db:test:prepare 
** Execute test:functionals
/usr/bin/ruby1.8 -I"lib:test" "/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake/rake_test_loader.rb"  
** Invoke test:integration (fi/rake_test_loader.rb"  
/usr/bin/ruby1.8 -I"lib:test" "/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake/rake_test_loader.rb"  
Errors running test:units!
]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ rake 
(in /home/asit/Apps/test)
/usr/bin/ruby1.8 -I"lib:test" "/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake/rake_test_loader.rb"  
/usr/bin/ruby1.8 -I"lib:test" "/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake/rake_test_loader.rb"  
Errors running test:units!
]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ rake -t
(in /home/asit/Apps/test)
** Invoke default (first_time)
** Invoke test (first_time)
** Execute test
** Invoke test:units (first_time)
** Invoke db:test:prepare (first_time)
** Invoke db:abort_if_pending_migrations (first_time)
** Invoke environment (first_time)
** Execute environment
** Execute db:abort_if_pending_migrations
** Invoke test:functionals (first_time)
** Invoke db:test:prepare 
** Execute test:functionals
/usr/bin/ruby1.8 -I"lib:test" "/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake/rake_test_loader.rb"  
** Invoke test:integration (first_time)
** Invoke db:test:prepare 
** Execute test:integration
/usr/bin/ruby1.8 -I"lib:test" "/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake/rake_test_loader.rb"  
Errors running test:units!
]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ clear
[H[2J]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ rake -T
(in /home/asit/Apps/test)
rake db:abort_if_pending_migrations       # Raises an error if there are pending migrations
rake db:charset                           # Retrieves the charset for the current environment's database
rake db:collation                         # Retrieves the collation for the current environment's database
rake db:create                            # Create the database defined in config/database.yml for the current RAILS_ENV
rake db:create:all                        # Create all the local databases defined in config/database.yml
rake db:drop                              # Drops the database for the current RAILS_ENV
rake db:drop:all                          # Drops all the local databases defined in config/database.yml
rake db:fixtures:identify                 # Search for a fixture given a LABEL or ID.
rake db:fixtures:load                     # Load fixtures into the current environment's database.
rake db:migrate                           # Migrate the database through scripts in db/migrate and update db/schema.rb by invoking db:schema:dump. Target specific ...
rake db:migrate:down                      # Runs the "down" for a given migration VERSION.
rake db:migrate:redo                      # Rollbacks the database one migration and re migrate up.
rake db:migrate:reset                     # Resets your database using your migrations for the current environment
rake db:migrate:up                        # Runs the "up" for a given migration VERSION.
rake db:reset                             # Drops and recreates the database from db/schema.rb for the current environment and loads the seeds.
rake db:rollback                          # Rolls the schema back to the previous version.
rake db:schema:dump                       # Create a db/schema.rb file that can be portably used against any DB supported by AR
rake db:schema:load                       # Load a schema.rb file into the database
rake db:seed                              # Load the seed data from db/seeds.rb
rake db:sessions:clear                    # Clear the sessions table
rake db:sessions:create                   # Creates a sessions migration for use with ActiveRecord::SessionStore
rake db:setup                             # Create the database, load the schema, and initialize with the seed data
rake db:structure:dump                    # Dump the database structure to a SQL file
rake db:test:clone                        # Recreate the test database from the current environment's database schema
rake db:test:clone_structure              # Recreate the test databases from the development structure
rake db:test:load                         # Recreate the test database from the current schema.rb
rake db:test:prepare                      # Check for pending migrations and load the test schema
rake db:test:purge                        # Empty the test database
rake db:version                           # Retrieves the current schema version number
rake doc:app                              # Build the RDOC HTML Files
rake doc:clobber_app                      # Remove rdoc products
rake doc:clobber_plugins                  # Remove plugin documentation
rake doc:clobber_rails                    # Remove rdoc products
rake doc:guides                           # Generate Rails guides
rake doc:plugins                          # Generate documentation for all installed plugins
rake doc:rails                            # Build the RDOC HTML Files
rake doc:reapp                            # Force a rebuild of the RDOC files
rake doc:rerails                          # Force a rebuild of the RDOC files
rake gems                                 # List the gems that this rails application depends on
rake gems:build                           # Build any native extensions for unpacked gems
rake gems:build:force                     # Force the build of all gems
rake gems:install                         # Installs all required gems.
rake gems:refresh_specs                   # Regenerate gem specifications in correct format.
rake gems:unpack                          # Unpacks all required gems into vendor/gems.
rake gems:unpack:dependencies             # Unpacks all required gems and their dependencies into vendor/gems.
rake log:clear                            # Truncates all *.log files in log/ to zero bytes
rake middleware                           # Prints out your Rack middleware stack
rake notes                                # Enumerate all annotations
rake notes:custom                         # Enumerate a custom annotation, specify with ANNOTATION=WTFHAX
rake notes:fixme                          # Enumerate all FIXME annotations
rake notes:optimize                       # Enumerate all OPTIMIZE annotations
rake notes:todo                           # Enumerate all TODO annotations
rake rails:freeze:edge                    # Lock to latest Edge Rails, for a specific release use RELEASE=1.2.0
rake rails:freeze:gems                    # Lock this application to the current gems (by unpacking them into vendor/rails)
rake rails:template                       # Applies the template supplied by LOCATION=/path/to/template
rake rails:unfreeze                       # Unlock this application from freeze of gems or edge and return to a fluid use of system gems
rake rails:update                         # Update both configs, scripts and public/javascripts from Rails
rake rails:update:application_controller  # Rename application.rb to application_controller.rb
rake rails:update:configs                 # Update config/boot.rb from your current rails install
rake rails:update:generate_dispatchers    # Generate dispatcher files in RAILS_ROOT/public
rake rails:update:javascripts             # Update your javascripts from your current rails install
rake rails:update:scripts                 # Add new scripts to the application script/ directory
rake routes                               # Print out all defined routes in match order, with names.
rake secret                               # Generate a crytographically secure secret key.
rake stats                                # Report code statistics (KLOCs, etc) from the application
rake test                                 # Run all unit, functional and integration tests
rake test:benchmark                       # Run tests for benchmarkdb:test:prepare / Benchmark the performance tests
rake test:functionals                     # Run tests for functionalsdb:test:prepare / Run the functional tests in test/functional
rake test:integration                     # Run tests for integrationdb:test:prepare / Run the integration tests in test/integration
rake test: as the system local time
rake time:zones:us                        # Displays names of US time zones recognized by the Rails TimeZone class, grouped by offset.
rake tmp:cache:clear                      # Clears all files and directories in tmp/cache
rake tmp:clear                            # Clear session, cache, and socket files from tmp/
rake tmp:create                           # Creates tmp directories for sessions, cache, sockets, and pids
rake tmp:pids:clear                       # Clears all files in tmp/pids
rake tmp:sessions:clear                   # Clears all files in tmp/sessions
rake tmp:sockets:clear                    # Clears all files in tmp/sockets
]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ rake db:create
(in /home/asit/Apps/test)
]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ clear
[H[2J]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ script [K/generate model dude name[K[K[K[Kdude_name [K;[K:Str[K[K[Kstring[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kscaffold dude dude_name:Str[K[K[K[Kst[K[K:string
      exists  app/models/
      exists  test/unit/
      exists  test/fixtures/
      create  app/models/scaffold.rb
wrong number of arguments (1 for 2)
]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ script/generate model scaffold dude dude_name:string[C[1P[1P[1P[1P[1P[1P
      exists  app/models/
      exists  app/controllers/
      exists  app/helpers/
      create  app/views/dudes
      exists  app/views/layouts/
      exists  test/functional/
      exists  test/unit/
      create  test/unit/helpers/
      exists  public/stylesheets/
      create  app/views/dudes/index.html.erb
      create  app/views/dudes/show.html.erb
      create  app/views/dudes/new.html.erb
      create  app/views/dudes/edit.html.erb
      create  app/views/layouts/dudes.html.erb
      create  public/stylesheets/scaffold.css
      create  app/controllers/dudes_controller.rb
      create  test/functional/dudes_controller_test.rb
      create  app/helpers/dudes_helper.rb
      create  test/unit/helpers/dudes_helper_test.rb
       route  map.resources :dudes
  dependency  model
      exists    app/models/
      exists    test/unit/
      exists    test/fixtures/
      create    app/models/dude.rb
      create    test/unit/dude_test.rb
      create    test/fixtures/dudes.yml
      create    db/migrate
      create    db/migrate/20100509071446_create_dudes.rb
]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ rake db:migrate
(in /home/asit/Apps/test)
==  CreateNations: migrating ==================================================
-- create_table(:nations)
   -> 0.0947s
==  CreateNations: migrated (0.0949s) =========================================

==  CreateNationalities: migrating ============================================
-- create_table(:nationalities)
   -> 0.0975s
==  CreateNationalities: migrated (0.0977s) ===================================

==  CreateDudes: migrating ====================================================
-- create_table(:dudes)
   -> 0.1302s
==  CreateDudes: migrated (0.1304s) ===========================================

]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ clear
[H[2J]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ script/generate formas[K[Ktastic
      exists  config/initializers
      create  config/initializers/formtastic.rb
      exists  public/stylesheets
      create  public/stylesheets/formtastic.css
      create  public/stylesheets/formtastic_changes.css
]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ rake db:rou[K[K[K[K[K[Kroutes
(in /home/asit/Apps/test)
   dude_nationalities GET    /dudes/:dude_id/nationalities(.:format)          {:controller=>"nationalities", :action=>"index"}
                      POST   /dudes/:dude_id/nationalities(.:format)          {:controller=>"nationalities", :action=>"create"}
 new_dude_nationality GET    /dudes/:dude_id/nationalities/new(.:format)      {:controller=>"nationalities", :action=>"new"}
edit_dude_nationality GET    /dudes/:dude_id/nationalities/:id/edit(.:format) {:controller=>"nationalities", :action=>"edit"}
     dude_nationality GET    /dudes/:dude_id/nationalities/:id(.:format)      {:controller=>"nationalities", :action=>"show"}
                      PUT    /dudes/:dude_id/nationalities/:id(.:format)      {:controller=>"nationalities", :action=>"update"}
                      DELETE /dudes/:dude_id/nationalities/:id(.:format)      {:controller=>"nationalities", :action=>"destroy"}
                dudes GET    /dudes(.:format)                                 {:controller=>"dudes", :action=>"index"}
                      POST   /dudes(.:format)                                 {:controller=>"dudes", :action=>"create"}
             new_dude GET    /dudes/new(.:format)                             {:controller=>"dudes", :action=>"new"}
            edit_dude GET    /dudes/:id/edit(.:format)                        {:controller=>"dudes", :action=>"edit"}
                 dude GET    /dudes/:id(.:format)                             {:controller=>"dudes", :action=>"show"}
                      PUT    /dudes/:id(.:format)                             {:controller=>"dudes", :action=>"update"}
                      DELETE /dudes/:id(.:format)                             {:controller=>"dudes", :action=>"destroy"}
                 root        /                                                {:controller=>"dudes", :action=>"index"}
                             /:controller/:action/:id                         
                             /:controller/:action/:id(.:format)               
]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ script/generate c[Kscafo[Kfold nationality
/usr/lib/ruby/gems/1.8/gems/rails-2.3.5/lib/rails/gem_dependency.rb:119:Warning: Gem::Dependency#version_requirements is deprecated and will be removed on or after August 2010.  Use #requirement
      exists  app/models/
      exists  app/controllers/
      exists  app/helpers/
      create  app/views/nationalities
      exists  app/views/layouts/
      exists  test/functional/
      exists  test/unit/
      exists  test/unit/helpers/
      exists  public/stylesheets/
      create  app/views/nationalities/index.html.erb
      create  app/views/nationalities/show.html.erb
      create  app/views/nationalities/new.html.erb
      create  app/views/nationalities/edit.html.erb
      create  app/views/layouts/nationalities.html.erb
   identical  public/stylesheets/scaffold.css
      create  app/controllers/nationalities_controller.rb
      create  test/functional/nationalities_controller_test.rb
      create  app/helpers/nationalities_helper.rb
      create  test/unit/helpers/nationalities_helper_test.rb
       route  map.resources :nationalities
  dependency  model
      exists    app/models/
      exists    test/unit/
      exists    test/fixtures/
        skip    app/models/nationality.rb
      create    test/unit/nationality_test.rb
      create    test/fixtures/nationalities.yml
      exists    db/migrate
Another migration is already named create_nationalities: db/migrate/20100509063746_create_nationalities.rb
]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ cler
No command 'cler' found, did you mean:
 Command 'cver' from package 'gplcver' (universe)
 Command 'clex' from package 'clex' (universe)
 Command 'clear' from package 'ncurses-bin' (main)
cler: command not found
]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ clear
[H[2J]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ ri Array
[?1049h[?1h=----------------------------------------------------------- Class: Array
     Arrays are ordered, integer-indexed collections of any object.
     Array indexing starts at 0, as in C or Java. A negative index is
     assumed to be relative to the end of the array---that is, an index
     of -1 indicates the last element of the array, -2 is the next to
     last element in the array, and so on.

------------------------------------------------------------------------
     helper to check for method existance in ruby 1.8- and
     1.9-compatible way because `methods`, `instance_methods` and others
     return strings in 1.8 and symbols in 1.9

       ['foo', 'bar'].include_method?(:foo) # => true

------------------------------------------------------------------------


Includes:
---------
     Enumerable(all?, any?, collect, count, cycle, detect, drop,
     drop_while, each_cons, each_slice, each_with_index,
     each_with_object, entries, enum_cons, enum_slice, enum_with_index,
     find, find_all, find_index, first, grep, group_by, include?,
     index_by, inject, many?, map, max, max_by, member?, min, min_by,
     minmax, minmax_by, none?, one?, partition, reduce, reject,
     reverse_each, select, sort, sort_by, sum, take, take_while, to_a,
     to_set, zip)


Class methods:
--------------
     [], new


Instance methods:
-----------------
:[K[K[?1l>[?1049l]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ ri Array
[?1049h[?1h=----------------------------------------------------------- Class: Array
     Arrays are ordered, integer-indexed collections of any object.
     Array indexing starts at 0, as in C or Java. A negative index is
     assumed to be relative to the end of the array---that is, an index
     of -1 indicates the last element of the array, -2 is the next to
     last element in the array, and so on.

------------------------------------------------------------------------
     helper to check for method existance in ruby 1.8- and
     1.9-compatible way because `methods`, `instance_methods` and others
     return strings in 1.8 and symbols in 1.9

       ['foo', 'bar'].include_method?(:foo) # => true

------------------------------------------------------------------------


Includes:
---------
     Enumerable(all?, any?, collect, count, cycle, detect, drop,
     drop_while, each_cons, each_slice, each_with_index,
     each_with_object, entries, enum_cons, enum_slice, enum_with_index,
     find, find_all, find_index, first, grep, group_by, include?,
     index_by, inject, many?, map, max, max_by, member?, min, min_by,
     minmax, minmax_by, none?, one?, partition, reduce, reject,
     reverse_each, select, sort, sort_by, sum, take, take_while, to_a,
     to_set, zip)


Class methods:
--------------
     [], new


Instance methods:
-----------------
:[K[K[?1l>[?1049l]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ ri Array#recu[K[Kduce
Nothing known about Array#reduce
]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ ri Array#reduce[C[1Preduce[1Preduce[1Preduce[1Peduce[1Peduce[1Preduce
[?1049h[?1h=More than one method matched your request. You can refine
your search by asking for information on one of:

     Racc::Parser#_racc_do_reduce, Racc::Parser#racc_reduce,
     Enumerable#reduce, Rational::reduce
[7m(END) [27m[K[K[?1l>[?1049l]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ ri reduceEreducenreduceureducemreduceereduce[Creduceareducebreducelreduceereduce#reduce
[?1049h[?1h=------------------------------------------------------ Enumerable#reduce
     enum.inject(initial, sym) => obj
     enum.inject(sym)          => obj
     enum.inject(initial) {| memo, obj | block }  => obj
     enum.inject          {| memo, obj | block }  => obj
------------------------------------------------------------------------
        enum.reduce(initial, sym) => obj
        enum.reduce(sym)          => obj
        enum.reduce(initial) {| memo, obj | block }  => obj
        enum.reduce          {| memo, obj | block }  => obj

     Combines all elements of _enum_ by applying a binary operation,
     specified by a block or a symbol that names a method or operator.

     If you specify a block, then for each element in _enum<i> the block
     is passed an accumulator value (<i>memo_) and the element. If you
     specify a symbol instead, then each element in the collection will
     be passed to the named method of _memo_. In either case, the result
     becomes the new value for _memo_. At the end of the iteration, the
     final value of _memo_ is the return value fo the method.

     If you do not explicitly specify an _initial_ value for _memo_,
     then uses the first element of collection is used as the initial
     value of _memo_.

     Examples:

        # Sum some numbers
        (5..10).reduce(:+)                            #=> 45
        # Same using a block and inject
        (5..10).inject {|sum, n| sum + n }            #=> 45
        # Multiply some numbers
        (5..10).reduce(1, :*)                         #=> 151200
        # Same using a block
        (5..10).inject(1) {|product, n| product * n } #=> 151200
        # find the longest word
:[K[K[?1l>[?1049l]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ ri Enumerable#reduce[K[K[K[K[K[Kdetect
[?1049h[?1h=------------------------------------------------------ Enumerable#detect
     enum.detect(ifnone = nil) {| obj | block }  => obj or nil
     enum.find(ifnone = nil)   {| obj | block }  => obj or nil
------------------------------------------------------------------------
     Passes each entry in _enum_ to _block_. Returns the first for which
     _block_ is not +false+. If no object matches, calls _ifnone_ and
     returns its result when it is specified, or returns +nil+

        (1..10).detect  {|i| i % 5 == 0 and i % 7 == 0 }   #=> nil
        (1..100).detect {|i| i % 5 == 0 and i % 7 == 0 }   #=> 35

[7m(END) [27m[K[K[?1l>[?1049l]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ ri Enumerable#detect[K[K[K[K[K[Kcollce[K[Kect
[?1049h[?1h=----------------------------------------------------- Enumerable#collect
     enum.collect {| obj | block }  => array
     enum.map     {| obj | block }  => array
------------------------------------------------------------------------
     Returns a new array with the results of running _block_ once for
     every element in _enum_.

        (1..4).collect {|i| i*i }   #=> [1, 4, 9, 16]
        (1..4).collect { "cat"  }   #=> ["cat", "cat", "cat", "cat"]

[7m(END) [27m[K[K[?1l>[?1049l]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ ri Enumerable#collect[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[KArray
[?1049h[?1h=----------------------------------------------------------- Class: Array
     Arrays are ordered, integer-indexed collections of any object.
     Array indexing starts at 0, as in C or Java. A negative index is
     assumed to be relative to the end of the array---that is, an index
     of -1 indicates the last element of the array, -2 is the next to
     last element in the array, and so on.

------------------------------------------------------------------------
     helper to check for method existance in ruby 1.8- and
     1.9-compatible way because `methods`, `instance_methods` and others
     return strings in 1.8 and symbols in 1.9

       ['foo', 'bar'].include_method?(:foo) # => true

------------------------------------------------------------------------


Includes:
---------
     Enumerable(all?, any?, collect, count, cycle, detect, drop,
     drop_while, each_cons, each_slice, each_with_index,
     each_with_object, entries, enum_cons, enum_slice, enum_with_index,
     find, find_all, find_index, first, grep, group_by, include?,
     index_by, inject, many?, map, max, max_by, member?, min, min_by,
     minmax, minmax_by, none?, one?, partition, reduce, reject,
     reverse_each, select, sort, sort_by, sum, take, take_while, to_a,
     to_set, zip)


Class methods:
--------------
     [], new


Instance methods:
-----------------
:[K[K[?1l>[?1049l]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ ri Array#select
[?104hers
     return strings in 1.8 and symbols in 1.9

       ['foo', 'bar'].include_method?(:foo) # => true

------------------------------------------------------------------------


Includes:
---------
     Enumerable(all?, any?, collect, count, cycle, detect, drop,
     drop_while, each_cons, each_slice, each_with_index,
     each_with_object, entries, enum_cons, enum_slice, enum_with_index,
     find, find_all, find_index, first, grep, group_by, include?,
     index_by, inject, many?, map, max, max_by, member?, min, min_by,
     minmax, minmax_by, none?, one?, partition, reduce, reject,
     reverse_each, select, sort, sort_by, sum, take, take_while, to_a,
     to_set, zip)


Class methods:
--------------
     [], new


Instance methods:
-----------------
:[K[K[?1l>[?1049l]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ ri Array#select
[?1049h[?1h=----------------------------------------------------------- Array#select
     array.select {|item| block } -> an_array
------------------------------------------------------------------------
     Invokes the block passing in successive elements from _array_,
     returning an array containing those elements for which the block
     returns a true value (equivalent to +Enumerable#select+).

        a = %w{ a b c d e f }
        a.select {|v| v =~ /[aeiou]/}   #=> ["a", "e"]

[7m(END) [27m[K[K[?1l>[?1049l]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ ri Array#select
[?1049h[?1h=----------------------------------------------------------- Array#select
     array.select {|item| block } -> an_array
------------------------------------------------------------------------
     Invokes the block passing in successive elements from _array_,
     returning an array containing those elements for which the block
     returns a true value (equivalent to +Enumerable#select+).

        a = %w{ a b c d e f }
        a.select {|v| v =~ /[aeiou]/}   #=> ["a", "e"]

[7m(END) [27m[K[K[?1l>[?1049l]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ ri Array#select[K[K[K[K[K[Kree[Kject
[?1049h[?1h=----------------------------------------------------------- Array#reject
     array.reject {|item| block }  -> an_array
------------------------------------------------------------------------
     Returns a new array containing the items in _self_ for which the
     block is not true.

[7m(END) [27m[K[K[?1l>[?1049l]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ qclear[K[K[K[K[K[Kclear
[H[2J]0;asit@ubuntu: ~/Apps/testasit@ubuntu:~/Apps/test$ rake routes
(in /home/asit/Apps/test)
        nationalities GET    /nationalities(.:format)                         {:controller=>"nationalities", :action=>"index"}
                      POST   /nationalities(.:format)                         {:controller=>"nationalities", :action=>"create"}
      new_nationality GET    /nationalities/new(.:format)                     {:controller=>"nationalities", :action=>"new"}
     edit_nationality GET    /nationalities/:id/edit(.:format)                {:controller=>"nationalities", :action=>"edit"}
          nationality GET    /nationalities/:id(.:format)                     {:controller=>"nationalities", :action=>"show"}
                      PUT    /nationalities/:id(.:format)                     {:controller=>"nationalities", :action=>"update"}
                      DELETE /nationalities/:id(.:format)                     {:controller=>"nationalities", :action=>"destroy"}
   dude_nationalities GET    /dudes/:dude_id/nationalities(.:format)          {:controller=>"nationalities", :action=>"index"}
                      POST   /dudes/:dude_id/nationalities(.:format)          {:controller=>"nationalities", :action=>"create"}
 new_dude_nationality GET    /dudes/:dude_id/nationalities/new(.:format)      {:controller=>"nationalities", :action=>"new"}
edit_dude_nationality GET    /dudes/:dude_id/nationalities/:id/edit(.:format) {:controller=>"nationalities", :action=>